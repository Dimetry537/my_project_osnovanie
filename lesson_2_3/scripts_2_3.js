/*let x = 5 + 10 * 2; // операторы - +, *, =; операнды - 5, 10, 2
let isValid = (x > 10) && (x < 30); // операторы - <, >, &&; операнды - 10, 30, х
x++; // операторы - +; операнды - х, 1
delete obj.prop; // операторы - delete; операнды - obj.prop*/

// Задаем два числа для операций
let num1 = 12;
let num2 = 5;

// 1. Сложение двух чисел
let sum = num1 + num2;
console.log(`Сложение: ${num1} + ${num2} = ${sum}`);

// 2. Разность двух чисел
let difference = num1 - num2;
console.log(`Разность: ${num1} - ${num2} = ${difference}`);

// 3. Произведение двух чисел
let product = num1 * num2;
console.log(`Произведение: ${num1} * ${num2} = ${product}`);

// 4. Деление двух чисел
let quotient = num1 / num2;
console.log(`Деление: ${num1} / ${num2} = ${quotient}`);

// 5. Остаток от деления двух чисел
let remainder = num1 % num2;
console.log(`Остаток от деления: ${num1} % ${num2} = ${remainder}`);

// 6. Возведение числа в степень
let exponentiation = Math.pow(num1, num2);
console.log(`Возведение в степень: ${num1}^${num2} = ${exponentiation}`);

/*1. let a = 10;
Это просто объявление переменной и присвоение значения. Здесь нет арифметических операций.
2. let b = -a;
Оператор - перед a является унарным оператором отрицания. Он используется для смены знака значения переменной a. В данном случае переменная a содержит значение 10, и результат операции будет -10, который присваивается переменной b.
Унарные операторы работают с одним операндом. В данном случае это переменная a.
3. a++;
Оператор ++ — это унарный оператор инкремента. Он увеличивает значение переменной на 1.
В этом случае значение переменной a, которое было равно 10, становится 11 после выполнения этой операции.
Оператор ++ может быть постфиксным (как в этом случае, когда он стоит после переменной) или префиксным (когда он стоит перед переменной, например, ++a). Постфиксный инкремент сначала возвращает значение переменной, а затем увеличивает его.
4. let c = a + b;
В этой строке мы используем бинарный оператор +, который складывает значения переменных a и b.
Бинарные операторы работают с двумя операндами. В данном случае это a и b.
Краткий итог:
Унарные операторы: -a (отрицание) и a++ (инкремент).
Бинарный оператор: a + b (сложение).
Унарные операторы работают с одним операндом, а бинарные — с двумя.*/

let x = 15;
let y = 20;

// Сравниваем x и y
if (x > y) {
    console.log(`${x} больше, чем ${y}`);
} else if (x < y) {
    console.log(`${x} меньше, чем ${y}`);
} else {
    console.log(`${x} равно ${y}`);
}

/*1. 5 == '5';
Результат: true.

Объяснение: Оператор == (нестрогое равенство) выполняет преобразование типов перед сравнением. В данном случае, '5' (строка) будет преобразована в число, и выражение станет 5 == 5. Поскольку значения равны, результат будет true.

2. 5 === '5';
Результат: false.

Объяснение: Оператор === (строгое равенство) не выполняет преобразование типов. Он проверяет, равны ли и значение, и тип данных. Здесь 5 — это число, а '5' — строка, поэтому типы разные, и результат будет false.

3. null == undefined;
Результат: true.

Объяснение: В JavaScript оператор == при сравнении null и undefined рассматривает их как равные, поскольку оба представляют отсутствие значения. Это исключение в правилах нестрогого сравнения, поэтому результат будет true.

4. null === undefined;
Результат: false.

Объяснение: Оператор === проверяет как значения, так и типы данных. Поскольку null и undefined — это разные типы данных (null — это специальное значение для "пустоты", а undefined — для необъявленного или неопределённого значения), результат будет false.

Краткий вывод:
Оператор == (нестрогое равенство) выполняет преобразование типов, если это возможно, что может привести к результату true даже при разных типах данных.
Оператор === (строгое равенство) проверяет как значения, так и типы, что делает его более точным при сравнении.*/

let user = {
    name: 'John',
    age: 30
  };
  
  console.log('name' in user);  // Результат: true
  console.log('email' in user); // Результат: false

/*1. console.log('name' in user);
Результат: true.

Объяснение: Оператор in проверяет наличие ключа (свойства) в объекте. В данном случае, ключ 'name' присутствует в объекте user, поэтому результат будет true.

2. console.log('email' in user);
Результат: false.

Объяснение: Ключ 'email' не существует в объекте user, поэтому результат будет false. Оператор in возвращает false, если ключа нет в объекте.

Вывод:
Оператор in проверяет, есть ли определённый ключ (свойство) в объекте. Если ключ существует — результат true, если нет — false.*/

let a = 10;

a += 5; // Эквивалентно a = a + 5;
a *= 2; // Эквивалентно a = a * 2;
a -= 3; // Эквивалентно a = a - 3;

let isAdmin = true;
let isLoggedIn = false;

let canViewPage = isAdmin && isLoggedIn;
let hasPermission = isAdmin || isLoggedIn;
let isGuest = !isLoggedIn;

/*1. let canViewPage = isAdmin && isLoggedIn;
Результат: false.

Объяснение: Оператор && (логическое И) возвращает true, только если оба операнда являются истинными.

В данном случае: isAdmin = true и isLoggedIn = false.
Поскольку одно из значений (isLoggedIn) является false, результат всего выражения будет false. Это означает, что для переменной canViewPage установлено значение false, так как для просмотра страницы требуется быть и администратором, и авторизованным пользователем.
2. let hasPermission = isAdmin || isLoggedIn;
Результат: true.

Объяснение: Оператор || (логическое ИЛИ) возвращает true, если хотя бы один из операндов является истинным.

В данном случае: isAdmin = true и isLoggedIn = false.
Так как один из операндов ( isAdmin) равен true, результат всего выражения будет true. Это означает, что для переменной hasPermission установлено значение true, так как для получения доступа достаточно быть либо администратором, либо авторизованным пользователем.
3. let isGuest = !isLoggedIn;
Результат: true.

Объяснение: Оператор ! (логическое НЕ) инвертирует значение операнда.

В данном случае: isLoggedIn = false.
Оператор ! инвертирует это значение, превращая его в true. Таким образом, переменная isGuest принимает значение true, так как пользователь не авторизован и считается гостем.
Краткий итог:
&& (И) требует, чтобы оба условия были истинными, иначе результат будет false.
|| (ИЛИ) требует, чтобы хотя бы одно условие было истинным, тогда результат будет true.
! (НЕ) инвертирует значение логического выражения (из true делает false и наоборот).*/

let isLoggedIn1 = true; // Или false

// Используем тернарный оператор для выбора сообщения
let message = isLoggedIn1 ? "Добро пожаловать" : "Вход запрещен";

// Выводим сообщение
console.log(message);


// Определяем типы данных с помощью typeof
console.log(typeof 123);       // number
console.log(typeof 'Hello');   // string
console.log(typeof undefined); // undefined

// Создаем объект car
let car = {
    make: 'Toyota',
    model: 'Corolla'
};

// Удаляем свойство model из объекта car
delete car.model;

// Проверяем объект car после удаления
console.log(car);  // { make: 'Toyota' }

let num11 = 10;
let num22 = 20;

// Выполняем несколько арифметических операций
let sum1 = num11 + num22;
let difference1 = num11 - num22;
let product1 = num11 * num22;
let quotient1 = num11 / num22;

// Выполняем сравнение
let isEqual = num11 == num22; // Проверяем, равны ли числа
let isGreater = num11 > num22; // Проверяем, больше ли первое число второго

// Используем логические операторы
let areBothPositive = num11 > 0 && num22 > 0; // Проверяем, оба ли числа положительные
let isEitherNegative = num11 < 0 || num22 < 0; // Проверяем, хотя бы одно из чисел отрицательное

// Используем тернарный оператор для вывода результата
let comparisonResult = isEqual ? "Числа равны" : (isGreater ? "Первое число больше" : "Второе число больше");

// Выводим результаты
console.log(`Сумма: ${sum1}`);
console.log(`Разность: ${difference1}`);
console.log(`Произведение: ${product1}`);
console.log(`Частное: ${quotient1}`);
console.log(`Результат сравнения: ${comparisonResult}`);
console.log(`Оба числа положительные: ${areBothPositive}`);
console.log(`Хотя бы одно число отрицательное: ${isEitherNegative}`);

